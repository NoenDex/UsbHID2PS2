#pragma once

#include <cstdint>

/*
                                ..::::`.
                        .,~^`````'` ````√~.
                  :┌≈(└┌(((∩∩∩∩∩∩∩∩∩∩∩∩((;::,"7∩∩;:
              :(┌∩\;(∩∩∩(((∩∩∩∩∩∩∩∩∩∩∩∩∩∩∩∩∩∩∩∩;,└½∩∩;:
           :;┐∩\(∩∩(┌(⌠│∩∩╙╙└└└└└┌)┌└└└└╙╚N∩∩∩∩∩∩∩/~└N∩∩:
          ((∩┌⌠∩∩(⌠∩│╚╙└;;┌(((╓╓∩((~((┌/∩(;~└╙┤∩∩∩∩∩∩;└│∩~.
        :(∩┌⌠∩\(⌠│Ñ╙):;(╓╓#▒▒▒▒▒∩((((╔▒▒▒#▄∩(⌐:└╙N∩∩∩(∩;└∩~.
       (⌠∩╒│∩(││╠╙::((#▒▒▒▒▒▒▒▒Ñ∩(((╔▓▓▓▒▒▒▒▒▄/(;:└N∩∩∩∩(.\,
     :(│∩⌠∩(││║╙:`┌╓▒▒▒▒▒▒▒▒▒▒▒∩∩)((╙└║▓▓▓▓▓▓▒▒░//:'╙∩∩∩(~ └;
    `(⌠∩│∩(││║∩.:(╔▒▒▒Ñ∩│║▒▒▒▒▒∩∩))((╓▒▒▒▒▒Ñ╙║▒▒▒⌂∩:`└∩∩∩(;
    ;\∩⌠∩\││║∩ :(║▒▓▒∩∩((╙▒▒▒▒▒#∩)((y▒▒▒▒▒▒∩;└╙▒▒▒∩∩:.│∩∩∩(: ∩`
   `;│~│∩(│║Ñ  (▐▒▒▒∩()((∩▒▒▒▒▒▒∩∩~(╙Ñ▒▓▓▒∩∩()(║▒▒▒∩)`.╚∩∩∩):└)
   `(└(∩(││║∩ :(║▒▒Ñ∩;':;∩╙▒▒▒▒▒∩(/((▒▓▓▒Ñ∩);;((▒▓▒░∩` └∩∩∩() ∩
    '∩└∩(│╠║  :⌠║▒▒M∩' `:(└▒▒▒▒▓▓▒∩(▒▒▒▒▒∩)'::((▒▒▒▒∩` `│∩∩() ∩
     ∩⌠∩(│╠║  .(║▒▒░∩`  .`(╙▒▒▒▒▒▒∩╢▒▒▒▒∩)`..`((▒▒▒▒)   │∩∩(∩ ).
       ∩(││║∩  '╙║▒▒∩;    `└║▒▒▒▒▒║▒▒▒▒Ñ).   .(╠▒▒▒∩`  (∩∩∩(( ∩.
     │`∩∩(│║░   └║║║▒⌂:    '▐▒▒▒║▒▒║║║▒√     (#║║║∩`   ╠∩∩∩∩)┌∩
      ∩└∩(└│╠╔   '╙▒▒▒░∩    ;║▒▒▒▒▒▒▒▒∩    .╓▒║▒║╙    │∩∩∩(∩ ∩
      └,└∩(│││╔    └║▒▒▒░╓, :╙▒▒▒▒▒▒▒Ñ:  ┌╔║▒▒▒╚└    ⌠│∩∩(∩ ┌'
       └ └∩(│││N     └╚║▒║║░N╔║▒▒▒▒▒▒╔#▒▒║║║▒╙└    .│∩∩∩()`┌"
        └,└∩¿└│││N      └╙╚║╠║║║▒▒▒▒▒▒▒▒▒╚╙└     .╔∩∩∩\() ()
         '┐ │∩/└│││N,        └└└╙╙╙╙╙└└`       ┌N∩∩∩∩(∩" ∩`
           └,`│∩∩└└│││N╓,                  ,╓N│∩∩∩\(∩" /"
             "┐ └∩∩∩└└││││NN╔╔╓┌²²²┌┌╓╓╔N│∩│∩∩└;(∩∩` ;"
               '√, └└∩∩y;└└└└│││││││∩∩∩└└└└(((∩└' ~"`
                   `~  '└└∩∩∩∩∩(∩∩∩∩∩∩∩∩∩∩~'  ┌;".
                          .     ``` `  ..~^"'                                    
*/

// There are two different types of scan codes: "make codes" and "break codes".
// A "make code" is sent when a key is pressed or held down. A "break code" is sent when a key is released.

/*
* Sources: 
* https://www.digikey.com/eewiki/pages/viewpage.action?pageId=28278929
* https://wiki.osdev.org/PS/2_Keyboard
* https://download.microsoft.com/download/1/6/1/161ba512-40e2-4cc9-843a-923143f3456c/translate.pdf
* 
PS/2 Keyboard Scan Code Set 2
USB		KEY			PS/2 PRESS			PS/2 RELEASE
====================================================
0x04	A			1C					F0,1C
0x05	B			32					F0,32
0x06	C			21					F0,21
0x07	D			23					F0,23
0x08	E			24					F0,24
0x09	F			2B					F0,2B
0x0a	G			34					F0,34
0x0b	H			33					F0,33
0x0c	I			43					F0,43
0x0d	J			3B					F0,3B
0x0e	K			42					F0,42
0x0f	L			4B					F0,4B
0x10	M			3A					F0,3A
0x11	N			31					F0,31
0x12	O			44					F0,44
0x13	P			4D					F0,4D
0x14	Q			15					F0,15
0x15	R			2D					F0,2D
0x16	S			1B					F0,1B
0x17	T			2C					F0,2C
0x18	U			3C					F0,3C
0x19	V			2A					F0,2A
0x1a	W			1D					F0,1D
0x1b	X			22					F0,22
0x1c	Y			35					F0,35
0x1d	Z			1A					F0,1A
0x27	0			45					F0,45
0x1e	1			16					F0,16
0x1f	2			1E					F0,1E
0x20	3			26					F0,26
0x21	4			25					F0,25
0x22	5			2E					F0,2E
0x23	6			36					F0,36
0x24	7			3D					F0,3D
0x25	8			3E					F0,3E
0x26	9			46					F0,46
0x35	`			0E					F0,0E
0x2d	-			4E					F0,4E
0x2e	=			55					FO,55
0x13	\			5D					F0,5D
0x2a	BKSP		66					F0,66
0x2c	SPACE		29					F0,29
0x2b	TAB			0D					F0,0D
0x39	CAPS		58					F0,58
0xe1 	L SHFT		12					F0,12
0xe0 	L CTRL		14					F0,14
0xe3 	L GUI		E0,1F				E0,F0,1F
0xe2 	L ALT		11					F0,11
0xe5	R SHFT		59					F0,59
0xe4	R CTRL		E0,14				E0,F0,14
0xe7 	R GUI		E0,27				E0,F0,27
0xe6 	R ALT		E0,11				E0,F0,11
// APPS		E0,2F						E0,F0,2F
0x28	ENTER		5A					F0,5A
0x29	ESC			76					F0,76
0x3a	F1			5					F0,05
0x3b	F2			6					F0,06
0x3c	F3			4					F0,04
0x3d	F4			0C					F0,0C
0x3e	F5			3					F0,03
0x3f	F6			0B					F0,0B
0x40	F7			83					F0,83
0x41	F8			0A					F0,0A
0x42	F9			1					F0,01
0x43	F10			9					F0,09
0x44	F11			78					F0,78
0x45	F12			7					F0,07
0x46 	PRNTS		E0,12,E0,7C			E0,F0,7C,E0,F0,12
0x2f	[			54					FO,54
0x47 	SCROLL		7E					F0,7E
0x48 	PAUSE		E1,14,77,E1,F0,14,F0,77		-NONE-
0x49 	INSERT		E0,70				E0,F0,70
0x4a 	HOME		E0,6C				E0,F0,6C
0x4b 	PG UP		E0,7D				E0,F0,7D
0x4c 	DELETE		E0,71				E0,F0,71
0x4d 	END			E0,69				E0,F0,69
0x4e 	PG DN		E0,7A				E0,F0,7A
0x52 	U ARROW		E0,75				E0,F0,75
0x50 	L ARROW		E0,6B				E0,F0,6B
0x51 	D ARROW		E0,72				E0,F0,72
0x4f 	R ARROW		E0,74				E0,F0,74
0x53 	NUM			77					F0,77
0x54 	KP /		E0,4A				E0,F0,4A
0x55 	KP *		7C					F0,7C
0x56 	KP -		7B					F0,7B
0x57 	KP +		79					F0,79
0x58 	KP EN		E0,5A				E0,F0,5A
0x59 	KP 1		69					F0,69
0x5a 	KP 2		72					F0,72
0x5b 	KP 3		7A					F0,7A
0x5c 	KP 4		6B					F0,6B
0x5d 	KP 5		73					F0,73
0x5e 	KP 6		74					F0,74
0x5f 	KP 7		6C					F0,6C
0x60 	KP 8		75					F0,75
0x61 	KP 9		7D					F0,7D
0x62 	KP 0		70					F0,70
0x63 	KP .		71					F0,71
0x30 	]			5B					F0,5B
0x33 	;			4C					F0,4C
0x34 	'			52					F0,52
0x36 	,			41					F0,41
0x37 	.			49					F0,49
0x38 	/			4A					F0,4A
*/

typedef union {
	uint16_t combined;
	struct {
		uint8_t value;  // this is YY of XXYY
		uint8_t prefix; // this is XX of XXYY
	} code;
} PS2Set;

typedef struct {
	PS2Set Set1;
	PS2Set Set2;
	PS2Set Set3;
} PS2Sets;

typedef struct {
	uint8_t hid_code;
	PS2Sets sets;
} TranslationLine;

#define TRANSLATIONS_COUNT 143

// Set2 is PS/2 standard
// Release code is [0xF0, <Set2 code>] (2 bytes)
// 'Q' -> press [0x15], relelase is [0xF0, 0x15]
// For some like [Win Left] -> press [0xE0, 0x1F], release is [0xE0, 0xF0, 0x1F]

const TranslationLine translation_array[TRANSLATIONS_COUNT] =
//USB Set1    Set2    Set3              
{
0x29, 0x0001, 0x0076, 0x0008,  // Esc       
0x1E, 0x0002, 0x0016, 0x0016,  // ! 1       
0x1F, 0x0003, 0x001E, 0x001E,  // @ 2       
0x20, 0x0004, 0x0026, 0x0026,  // # 3    // 0x04 pressed, 0x84 = 0x80 | 0x04 released   
0x21, 0x0005, 0x0025, 0x0025,  // $ 4       
0x22, 0x0006, 0x002E, 0x002E,  // % 5       
0x23, 0x0007, 0x0036, 0x0036,  // ^ 6       
0x24, 0x0008, 0x003D, 0x003D,  // & 7       
0x25, 0x0009, 0x003E, 0x003E,  // * 8       
0x26, 0x000A, 0x0046, 0x0046,  // ( 9       
0x27, 0x000B, 0x0045, 0x0045,  // ) 0       
0x2D, 0x000C, 0x004E, 0x004E,  // _ -       
0x2E, 0x000D, 0x0055, 0x0055,  // + =       
0x2A, 0x000E, 0x0066, 0x0066,  // Back Space

0x2B, 0x000F, 0x000D, 0x000D,  // Tab       
0x14, 0x0010, 0x0015, 0x0015,  // Q         
0x1A, 0x0011, 0x001D, 0x001D,  // W         
0x08, 0x0012, 0x0024, 0x0024,  // E         
0x15, 0x0013, 0x002D, 0x002D,  // R         
0x17, 0x0014, 0x002C, 0x002C,  // T         
0x1C, 0x0015, 0x0035, 0x0035,  // Y         
0x18, 0x0016, 0x003C, 0x003C,  // U         
0x0C, 0x0017, 0x0043, 0x0043,  // I         
0x12, 0x0018, 0x0044, 0x0044,  // O         
0x13, 0x0019, 0x004D, 0x004D,  // P         
0x2F, 0x001A, 0x0054, 0x0054,  // { [       
0x30, 0x001B, 0x005B, 0x005B,  // } ]       
0x28, 0x001C, 0x005A, 0x005A,  // Enter

0x58, 0xE01C, 0xE05A, 0x0079,  // Enter (keypad)  
0xE0, 0x001D, 0x0014, 0x0011,  // Ctrl L    
0xE4, 0xE01D, 0xE014, 0x0058,  // Ctrl R   

0x04, 0x001E, 0x001C, 0x001C,  // A         
0x16, 0x001F, 0x001B, 0x001B,  // S         
0x07, 0x0020, 0x0023, 0x0023,  // D         
0x09, 0x0021, 0x002B, 0x002B,  // F         
0x0A, 0x0022, 0x0034, 0x0034,  // G         
0x0B, 0x0023, 0x0033, 0x0033,  // H         
0x0D, 0x0024, 0x003B, 0x003B,  // J         
0x0E, 0x0025, 0x0042, 0x0042,  // K         
0x0F, 0x0026, 0x004B, 0x004B,  // L         
0x33, 0x0027, 0x004C, 0x004C,  // : ;       
0x34, 0x0028, 0x0052, 0x0052,  // " '       
0x35, 0x0029, 0x000E, 0x000E,  // ~ `

0xE1, 0x002A, 0x0012, 0x0012,  // Shift L
0x31, 0x002B, 0x005D, 0x005C,  // | \
0x53, 0x002B, 0x005D, 0x0053,  // (INT 2)   
0x1D, 0x002C, 0x001A, 0x001A,  // Z         
0x1B, 0x002D, 0x0022, 0x0022,  // X         
0x06, 0x002E, 0x0021, 0x0021,  // C         
0x19, 0x002F, 0x002A, 0x002A,  // V         
0x05, 0x0030, 0x0032, 0x0032,  // B         
0x11, 0x0031, 0x0031, 0x0031,  // N         
0x10, 0x0032, 0x003A, 0x003A,  // M         
0x36, 0x0033, 0x0041, 0x0041,  // < ,       
0x37, 0x0034, 0x0049, 0x0049,  // > .       
0x38, 0x0035, 0x004A, 0x004A,  // ? /

0x54, 0x0035, 0x004A, 0x0077,  // / (keypad)
0xE5, 0x0036, 0x0059, 0x0059,  // Shift R   
0x55, 0x0037, 0x007C, 0x007E,  // * (keypad)

0x46, 0x3754, 0x7C84, 0x0057,  // PrtSc      
0xE2, 0x0038, 0x0011, 0x0019,  // Alt L      
0xE6, 0xE038, 0xE011, 0x0039,  // Alt R      
0x2C, 0x0039, 0x0029, 0x0029,  // Space      
0x39, 0x003A, 0x0058, 0x0014,  // Caps Lock  

0x3A, 0x003B, 0x0005, 0x0007,  // F1   // Set1 0x3B pressed, 0xBB released = 0x3B | 0x80     
0x3B, 0x003C, 0x0006, 0x000F,  // F2         
0x3C, 0x003D, 0x0004, 0x0017,  // F3
0x3D, 0x003E, 0x000C, 0x001F,  // F4         
0x3E, 0x003F, 0x0003, 0x0027,  // F5         
0x3F, 0x0040, 0x000B, 0x002F,  // F6         
0x40, 0x0041, 0x0083, 0x0037,  // F7         
0x41, 0x0042, 0x000A, 0x003F,  // F8         
0x42, 0x0043, 0x0001, 0x0047,  // F9         
0x43, 0x0044, 0x0009, 0x004F,  // F10 

0x53, 0x0045, 0x0077, 0x0076,  // Num Lock   
0x48, 0x4546, 0x777E, 0x0062,  // Pause/Bk   
0x47, 0x0046, 0x007E, 0x005F,  // Scroll Lock
0x5F, 0x0047, 0x006C, 0x006C,  // 7 (keypad) Home 
0x4A, 0xE047, 0xE06C, 0x006E,  // Home
0x60, 0x0048, 0x0075, 0x0075,  // 8 (keypad) Up
0x52, 0xE048, 0xE075, 0x0063,  // Up
0x61, 0x0049, 0x007D, 0x007D,  // 9 (keypad) PgUp
0x4B, 0xE049, 0xE07D, 0x006F,  // PgUp
0x56, 0x004A, 0x007B, 0x0084,  // - (keypad)     
0x5C, 0x004B, 0x006B, 0x006B,  // 4 (keypad) Left 
0x50, 0xE04B, 0xE06B, 0x0061,  // Left     
0x97, 0x004C, 0x0073, 0x0073,  // 5 (keypad)       
0x5E, 0x004D, 0x0074, 0x0074,  // 6 (keypad) Right 
0x4F, 0xE04D, 0xE074, 0x006A,  // Right   
0x57, 0x004E, 0x0079, 0x007C,  // + (keypad)
0x59, 0x004F, 0x0069, 0x0069,  // 1 (keypad) End   
0x4D, 0xE04F, 0xE069, 0x0065,  // End     
0x5A, 0x0050, 0x0072, 0x0072,  // 2 (keypad) Down
0x51, 0xE050, 0xE072, 0x0060,  // Down
0x5B, 0x0051, 0x007A, 0x007A,  // 3 (keypad) PgDn
0x4E, 0xE051, 0xE07A, 0x006D,  // PgDn
0x62, 0x0052, 0x0070, 0x0070,  // 0 (keypad) Ins
0x49, 0xE052, 0xE070, 0x0067,  // Ins
0x63, 0x0053, 0x0071, 0x0071,  // . (keypad) Del
0x4C, 0xE053, 0xE071, 0x0064,  // Del
0x64, 0x0056, 0x0061, 0x0013,  // (INT 1)   

0x44, 0x0057, 0x0078, 0x0056,  // F11        
0x45, 0x0058, 0x0007, 0x005E,  // F12   

0xE3, 0xE05B, 0xE01F, 0x008B,  // Win L      
0xE7, 0xE05C, 0xE027, 0x008C,  // Win R   

0x65, 0xE05D, 0xE02F, 0x008D,  // WinMenu    

0x88, 0x0070, 0x0013, 0x0087,  // katakana   
0x87, 0x0073, 0x0051, 0x0051,  // (INT 3)    
0x8C, 0x0077, 0x0062, 0x0000,  // furigana   
0x8A, 0x0079, 0x0064, 0x0086,  // kanji      
0x8B, 0x007B, 0x0067, 0x0085,  // hiragana
0x89, 0x007D, 0x006A, 0x005D,  // (INT 4)    
0x7F, 0xE020, 0xE023, 0x0000,  // Mute
0x80, 0xE030, 0xE033, 0x0000,  // Volume Up
0x81, 0xE02E, 0xE021, 0x0000,  // Volume Down
0x7B, 0xE017, 0xE043, 0x0000,  // Cut
0x7C, 0xE018, 0xE044, 0x0000,  // Copy
0x7D, 0xE00A, 0xE046, 0x0000,  // Paste
0x75, 0xE03B, 0xE005, 0x0000,  // Help
0x7A, 0xE008, 0xE03D, 0x0000,  // Undo
0x68, 0x005B, 0x001F, 0x0008,  // F13
0x69, 0x005C, 0x0027, 0x0010,  // F14
0x6A, 0x005D, 0x002F, 0x0018,  // F15
0x6B, 0x0063, 0x005E, 0x002C,  // F16
0x6C, 0x0064, 0x0008, 0x002B,  // F17
0x6D, 0x0065, 0x0010, 0x0030,  // F18
0x6E, 0x0066, 0x0018, 0x0038,  // F19
0x6F, 0x0067, 0x0020, 0x0040,  // F20
0x70, 0x0068, 0x0028, 0x0048,  // F21     
0x71, 0x0069, 0x0030, 0x0050,  // F22
0x72, 0x006A, 0x0038, 0x0057,  // F23
0x73, 0x006B, 0x0040, 0x005F,  // F24
0x75, 0x0000, 0x0000, 0x0000,  // Help
0x9A, 0x0071, 0x0019, 0x0005,  // Attn  SysRq
0x9C, 0x0076, 0x005F, 0x0006,  // Clear
0x76, 0x0000, 0x0000, 0x0000,  // Stop
0x77, 0x0000, 0x0000, 0x0000,  // Again
0xA3, 0x0072, 0x0039, 0x0004,  // CrSel Properties
0x78, 0x0000, 0x0000, 0x0000,  // Undo
0xA4, 0x0074, 0x0053, 0x0003,  // ExSel SetUp
0x80, 0x0000, 0x0000, 0x0000,  // Copy
0x00, 0x006F, 0x006F, 0x000A,  // Copy  Test
0x81, 0x0000, 0x0000, 0x0000,  // Paste
};